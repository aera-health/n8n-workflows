{
  "name": "Aera assistant",
  "nodes": [
    {
      "parameters": {
        "jsCode": "return $('Input data').all().map(x => {\n  // const questionnaireData = $('Extract Questionnaire Results').first().json;\n  // const bloodTestData = $('Extract Blood Test Results').first().json;\n  const item = x.json;\n  \n  const patientAnamnesis = `\n    **Blood test results:**\n    ${JSON.stringify(item.bloodResultsData)}\n    \n    **Questionnaire results:**\n    ${JSON.stringify(item.questionnaireResultsData)}\n  `.trim();\n  \n  return {\n    anamnesis: patientAnamnesis\n  };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        780,
        100
      ],
      "id": "4b6dc917-de68-4d34-8cf3-ca5b383b336f",
      "name": "Generate patient anamnesis"
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "resource": "fileFolder",
        "queryString": "={{ $('Input data').first().json.pathwayUrl }}",
        "limit": 1,
        "filter": {
          "folderId": {
            "__rl": true,
            "value": "13gNzGBlb92BhyBQ10pcx1w6D0PJqqVXq",
            "mode": "list",
            "cachedResultName": "health-plans",
            "cachedResultUrl": "https://drive.google.com/drive/folders/13gNzGBlb92BhyBQ10pcx1w6D0PJqqVXq"
          }
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        1020,
        100
      ],
      "id": "4cbfe618-a690-4157-a112-97b2dbacb665",
      "name": "Search Health Plan Template",
      "alwaysOutputData": true,
      "credentials": {
        "googleApi": {
          "id": "XlFwzHsP62pz7O9I",
          "name": "Google Service Account account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "edc8d4a4-2f27-4d70-869e-78a473e5b1b4",
              "leftValue": "={{ $json.isNotEmpty() }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1240,
        100
      ],
      "id": "1bf58906-2c8f-46ba-9fcb-bf7e04705549",
      "name": "If"
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        },
        "options": {
          "binaryPropertyName": "pathwayBinary"
        }
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        1480,
        -80
      ],
      "id": "3620e34d-d7fa-4945-a55c-dde1ded4e431",
      "name": "Download pathway",
      "credentials": {
        "googleApi": {
          "id": "XlFwzHsP62pz7O9I",
          "name": "Google Service Account account"
        }
      }
    },
    {
      "parameters": {
        "errorMessage": "=Pathway could not be found by URL: \"{{ $('On form submission').first().json['Pathway URL'] }}\""
      },
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        1480,
        220
      ],
      "id": "31e8eb94-5d24-401c-b008-1ed85f4901a7",
      "name": "Stop and Error"
    },
    {
      "parameters": {
        "operation": "fromJson",
        "binaryPropertyName": "pathwayBinary",
        "destinationKey": "pathway",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1740,
        -80
      ],
      "id": "181bf9dc-b4c8-4090-8ef7-1b7968f94b69",
      "name": "Extract Pathway from File"
    },
    {
      "parameters": {
        "content": "## Resolving Pathway",
        "height": 540,
        "width": 980
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        960,
        -140
      ],
      "id": "1c003290-437f-460d-afe7-91ae85dc84f8",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## Triggers",
        "height": 480,
        "width": 500,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -380,
        -40
      ],
      "id": "b7f5cc75-65e5-4682-92cf-a50173b72077",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "jsCode": "const treatments = $input.first().json.pathway.treatments;\nconst searchedInterventionName = $('Input data').first().json.inverventionName;\n\nreturn treatments.filter(x => x.name === searchedInterventionName);"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2560,
        -80
      ],
      "id": "a862f811-0eff-40bc-ac14-6d505ab67517",
      "name": "Match intervention by searched name"
    },
    {
      "parameters": {
        "content": "## Filter intervention list",
        "height": 700,
        "width": 1120
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2080,
        -160
      ],
      "id": "042a8cd6-c435-46c2-9c93-371804e98a5d",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "9b7b0663-6573-4e23-9f30-143b24619304",
              "leftValue": "={{ $json.name }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2800,
        -80
      ],
      "id": "db785091-ff81-4178-b26c-00cc71de0e39",
      "name": "Check filtered result"
    },
    {
      "parameters": {
        "errorMessage": "=Intervention item is not matched by name: {{ $('On form submission').first().json['Intervention name'] }}"
      },
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        3040,
        20
      ],
      "id": "46f82cba-fa69-4c79-b092-7afb37787732",
      "name": "Stop and Error2"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Input data').first().json.inverventionName }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "notEmpty",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Search by intervention name"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "0342270e-7267-4dab-a132-81a73af16fac",
                    "leftValue": "={{ $('Input data').first().json.searchType }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "empty",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Default"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "5be85ca7-d8e8-4d4f-8f38-1481de8d949a",
                    "leftValue": "={{ $('Input data').first().json.searchType }}",
                    "rightValue": "Full search",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Full search"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "4b021816-9d55-4e89-aad0-769592cbe19f",
                    "leftValue": "={{ $('Input data').first().json.searchType }}",
                    "rightValue": "RAG search",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "RAG based search"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        2160,
        120
      ],
      "id": "8268483c-9a26-4d97-bbde-6cdf0e3c2566",
      "name": "Switch filter interventions"
    },
    {
      "parameters": {
        "model": "gpt-4o",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        6200,
        140
      ],
      "id": "b23ae058-d97b-4493-8ad8-678bd7afd9e7",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "efHlwehLp2xTvVDY",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n\t\"type\": \"object\",\n\t\"properties\": {\n\t\t\"isRecommended\": {\n\t\t\t\"description\": \"Value is true if criteria are matched and there is no conflict.\",\n\t\t\t\"type\": \"boolean\"\n\t\t},\n\t\t\"recommendationReason\": {\n\t\t\t\"type\": \"string\"\n\t\t},\n\t\t\"notRecommendationReason\": {\n\t\t\t\"type\": \"string\"\n\t\t},\n\t\t\"option\": {\n\t\t\t\"type\": \"string\"\n\t\t},\n\t\t\"dosage\": {\n\t\t\t\"type\": \"object\",\n\t\t\t\"properties\": {\n\t\t\t\t\"dosage\": {\n\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t},\n\t\t\t\t\"recommendationReason\": {\n\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"required\": [\n\t\t\t\t\"dosage\"\n\t\t\t]\n\t\t}\n\t},\n\t\"required\": [\n\t\t\"isRecommended\"\n\t]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        6680,
        160
      ],
      "id": "81a7362b-0a46-4735-9ca4-4c4ff6586451",
      "name": "TreatmentMatchResult Parser"
    },
    {
      "parameters": {
        "maxItems": 2
      },
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        2820,
        260
      ],
      "id": "1ca656dc-2f22-415d-8568-df2412774bf9",
      "name": "Limit 2"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.text }}",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=Format your response in JSON format."
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.4,
      "position": [
        6540,
        -100
      ],
      "id": "985c2571-7397-4aa4-9165-7e2493681a5a",
      "name": "To JSON format",
      "retryOnFail": true
    },
    {
      "parameters": {
        "jsCode": "function getMsg(msg) {\n  return `\n    Role:\n    ${msg.role}\n\n    Context:\n    ${msg.content}\n\n    ---\n  `.trim();\n}\n\nreturn $('Start point').all().map((x, i) => {\n  let result = 'INPUT (for context only, not to be used for faithfulness evaluation):\\n';\n\n  for (const item of x.json.history) {\n    result += `\\n${getMsg(item)}\\n`;\n  }\n\n  const response = $('Match item').itemMatching(i).json.text;\n  \n  result += `\\nOUTPUT:\\n\\n${response}`;\n  \n  return {\n    prompt: result\n  }\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        6960,
        -100
      ],
      "id": "a78cd182-a4e8-4b18-9f12-6225e278ab03",
      "name": "Prepare validation prompt"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n\t\"type\": \"object\",\n\t\"properties\": {\n\t\t\"isValid\": {\n            \"description\": \"Your verdict\",\n\t\t\t\"type\": \"boolean\"\n\t\t},\n\t\t\"reasons\": {\n            \"description\": \"List your reasoning as bullet points\",\n\t\t\t\"type\": \"array\",\n\t\t\t\"items\": {\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t}\n\t},\n    \"required\": [ \"isValid\", \"reasons\" ]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        7500,
        140
      ],
      "id": "ed94690f-b57c-41de-8fdd-9f83b2cf4cff",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "jsCode": "return $input.all().map(x => {\n  return {\n    originItem: x.json,\n    // will be populated later\n    matchResult: null,\n    matchedDosage: null,\n    validationResults: [],\n    history: []\n  };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5220,
        -100
      ],
      "id": "83a8f232-9092-44ca-8939-c383d4d952ce",
      "name": "Map results to final object"
    },
    {
      "parameters": {
        "jsCode": "function prompt(medicationData) {\n  return `\nYou are a preventive medicine doctor assistant. Your task is to determine if a medication should be applied to a patient based on patient data and select the appropriate dosage.\n\nTo complete this task:\n\n1. **Evaluate Medication Criteria**: \n - Review both \\`inclusionTrigger\\` and \\`exclusionTrigger\\` conditions in the medication. \n - Match these conditions to the patient's data, considering all available information in their medical profile, history, and lab results.\n - **Inclusion Criteria Confirmation**. Ensure inclusion criteria are explicitly confirmed by available patient data; do not infer or assume patient conditions.\n - Ensure exclusion criteria do not conflict for the medication to be recommended.\n - Consider reviewing other properties such as \\`objective\\`, \\`benefit\\`, \\`supportingActivities\\` and other properties when reasoning and making decision.\n\n2. **Select Dosage**: After confirming the medication is suitable:\n - Review the \\`dosages\\` list to find the smallest effective dosage that meets the inclusion criteria for the patient’s condition without conflicting with any exclusion criteria.\n - If no dosage matches without conflicts, indicate this in the response.\n\n3. **Select option**: Review patient or doctor preferences and choose medication option (form) if \\`options\\` are specified.\n\n4. **Provide reasoning with citations on patient data.** Examples of reasoning:\n - The patient's blood pressure is reported as normal in their lab results (Lab Result: \"BP\" Measurement: \"120/80 mmHg\"), and there are no indications of hypertension in their medical history. The inclusion criterion for elevated blood pressure is not met.\n - **Current DHEA Level:** 5.5 umol/L - this qualifies for the dosages where DHEA levels are 6 umol/L or lower. **15 mg DHEA** is the smallest dosage option that addresses the current DHEA level requirement (6 umol/L or lower).\n\n**Medication data**:\n\n${JSON.stringify(medicationData)}\n`.trim();\n}\n\nconst anamnesis = $('Generate patient anamnesis').first().json.anamnesis;\nconst userPrompt = `\n### **Patient data:**\n\n${anamnesis}\n`.trim();\n\nreturn $input.all().map(x => {\n  return {\n    ...x.json,\n    history: [\n      {\n        role: 'system',\n        content: prompt(x)\n      },\n      {\n        role: 'user',\n        content: userPrompt\n      }\n    ]\n  };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5440,
        -100
      ],
      "id": "e0098a34-2e5f-4f9e-b924-c2777f9d1d3b",
      "name": "Prepare initial prompts"
    },
    {
      "parameters": {
        "model": "gpt-4o",
        "options": {
          "responseFormat": "json_object"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        7300,
        160
      ],
      "id": "22adfb42-e0ac-454e-ac80-41aa82430688",
      "name": "gpt-4o JSON",
      "credentials": {
        "openAiApi": {
          "id": "efHlwehLp2xTvVDY",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "return $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5660,
        -100
      ],
      "id": "a0bdb8b4-414c-4138-977a-df82d928aa41",
      "name": "Start point"
    },
    {
      "parameters": {
        "jsCode": "return $('Start point').all().map((x, i) => {\n  const item = x.json;\n  const originItem = item.originItem;\n  const matchResult = $('To JSON format').itemMatching(i).json.output;\n  let matchedDosage = null;\n  \n  if (matchResult.dosage?.dosage) {\n    matchedDosage = originItem.dosages.find(d => d.dosage == matchResult.dosage.dosage);\n  }\n\n  const validationResults = [...item.validationResults];\n  const lastValidationResult = validationResults.length > 0 ? validationResults[validationResults.length - 1] : null;\n  const newValidationResult = $('Validate result').itemMatching(i).json.output;\n  validationResults.push({\n    retry: (lastValidationResult?.retry ?? -1) + 1,\n    ...newValidationResult\n  });\n\n  const history = [...item.history];\n  const matchResultText = $('Match item').itemMatching(i).json.text;\n\n  history.push(\n    {\n      role: 'assistant',\n      content: matchResultText\n    }\n  );\n  \n  const validationResult = $('Validate result').itemMatching(i).json.output;\n  \n  if (!validationResult.isValid) {\n    history.push({\n      role: 'user',\n      content: `\n        Previous generated result didn't pass validation.\n        Reasons:\n        ${validationResult.reasons.map(x => '- ' + x).join('\\n')}\n\n        Regenerate response.\n      `.trim()\n    });\n  }\n  \n  \n  \n  return {\n    ...item,\n    matchResult,\n    matchedDosage,\n    validationResults,\n    history\n  }\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        7660,
        -100
      ],
      "id": "815c6a83-2cf6-436f-b9de-83015976556c",
      "name": "Map to result model for loop"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        7940,
        -100
      ],
      "id": "d36e440c-c935-4b21-8a21-8ee3fd088f85",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "da77b3a8-572e-497d-87b7-3384fa01db87",
              "leftValue": "={{ $json.validationResults.last().isValid }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        8000,
        320
      ],
      "id": "7a0591b1-ad35-4dcb-a87d-1881d650bd95",
      "name": "Check if last result is valid"
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    interventionItems: $input.all().map(x => x.json),\n    executionTime: '',\n    generatedAt: $now.toISO()\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        8620,
        -120
      ],
      "id": "4898644e-54ad-45ae-8c2e-9efbb4d82d3a",
      "name": "Format response"
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "inputDataFieldName": "file",
        "name": "={{ $input.item.binary.file.fileName }}",
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "value": "1h5xcHGWF-lwHMp5x_OtPKqcyU1zw5ejg",
          "mode": "list",
          "cachedResultName": "responses",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1h5xcHGWF-lwHMp5x_OtPKqcyU1zw5ejg"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        9820,
        -40
      ],
      "id": "1d3314af-a61d-4d48-b509-8a7d3fd264bf",
      "name": "Google Drive",
      "credentials": {
        "googleApi": {
          "id": "XlFwzHsP62pz7O9I",
          "name": "Google Service Account account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "function printMatches(matchedItems) {\n  let markdown = '';\n  \n  for (let index = 0; index < matchedItems.length; index++) {\n    const item = matchedItems[index];\n    const intervention = item.originItem;\n    const matchResult = item.matchResult;\n    const matchedDosage = item.matchedDosage;\n    const reason = matchResult.recommendationReason ? matchResult.recommendationReason : matchResult.notRecommendationReason;\n  \n    markdown += `**${index + 1}. ${intervention.name}**\\n`;\n\n    if (reason) {\n      markdown += `  - Reason: ${reason}\\n`;\n    }\n\n    const retries = item.validationResults.length - 1;\n\n    markdown += `  - Retries: ${retries}\\n`;\n\n    if (!matchResult.isRecommended) {\n      markdown += '\\n';\n      continue;\n    }\n  \n    if (matchResult.option) {\n      markdown += `  - Option: ${matchResult.option}\\n`;\n    }\n  \n    if (matchedDosage) {\n      markdown += `  - Dosage: ${matchedDosage.dosage}\\n`;\n      markdown += `  - Dosage Frequency: ${matchedDosage.frequency}\\n`;\n  \n      if (matchedDosage.option) {\n        markdown += `  - Dosage option: ${matchedDosage.option}\\n`;\n      }\n    }\n    else {\n      markdown += `  - Dosage: not matched\\n`;\n      markdown += `  - Not Matched Dosage from: ${matchResult.dosage.dosage}\\n`\n    }\n  \n    if (matchResult.recommendationReason) {\n      markdown += `  - Dosage recommendation reason: ${matchResult.recommendationReason}\\n`\n    }\n  \n    if (intervention.dossingInstructions) {\n      markdown += `  - Dossign instructions: ${intervention.dossingInstructions}\\n`;\n    }\n  \n    markdown += '\\n';\n  }\n\n  return markdown;\n}\n\nlet markdown = ``;\nlet data = $input.first().json;\n\nmarkdown += '# Health Plan\\n\\n';\nmarkdown += `Generated at: ${DateTime.fromISO(data.generatedAt).toLocaleString(DateTime.DATETIME_SHORT_WITH_SECONDS)}\\n`;\nmarkdown += `Execution time: ${data.executionTime}\\n\\n`;\n\nmarkdown += '## Matched items\\n\\n';\n\nconst matchedItems = data.interventionItems.filter(x => x.matchResult.isRecommended);\n\nif (matchedItems.length > 0) {\n  markdown += printMatches(matchedItems);\n} else {\n  markdown += '**No matches**\\n';\n}\n\nmarkdown += '\\n';\n\nmarkdown += '## NOT Matched items\\n\\n';\n\nconst notMatchedItems = data.interventionItems.filter(x => !x.matchResult.isRecommended);\n\nif (notMatchedItems.length > 0) {\n  markdown += printMatches(notMatchedItems);\n} else {\n  markdown += '**No matches**\\n';\n}\n\nreturn [\n  {\n    markdown\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        9040,
        120
      ],
      "id": "c412be45-c0a7-4c80-8490-975479ca70cd",
      "name": "Format health plan markdown"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        9500,
        -40
      ],
      "id": "4ad3ad84-7ca8-4f10-af91-08fe14a6b540",
      "name": "Merge"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.user }}",
        "messages": {
          "messageValues": [
            {
              "message": "={{ $json.system }}"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.4,
      "position": [
        6120,
        -100
      ],
      "id": "037fa63e-2655-4e15-84b9-d2a2bd29238d",
      "name": "Match item",
      "retryOnFail": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.prompt }}",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=Guidelines:\n1. The OUTPUT must not introduce new information beyond what's provided in the CONTEXT.\n2. The OUTPUT must not contradict any information given in the CONTEXT.\n3. Ignore the INPUT when evaluating faithfulness; it's provided for context only.\n4. Consider partial hallucinations where some information is correct but other parts are not.\n5. Pay close attention to the subject of statements. Ensure that attributes, actions, or dates are correctly associated with the right entities (e.g., a person vs. a TV show they star in).\n6. Be vigilant for subtle misattributions or conflations of information, even if the date or other details are correct.\n7. Check that the OUTPUT doesn't oversimplify or generalize information in a way that changes its meaning or accuracy.\n\nVerdict options:\n- \"true\": The OUTPUT is entirely faithful to the CONTEXT.\n- \"false\": The OUTPUT contains hallucinations or unfaithful information."
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.4,
      "position": [
        7240,
        -100
      ],
      "id": "4183ef6b-3ef0-42d9-bc75-e6192ce7c02d",
      "name": "Validate result",
      "retryOnFail": true
    },
    {
      "parameters": {
        "content": "## Intervention matching",
        "height": 840,
        "width": 3140
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        5080,
        -280
      ],
      "id": "1b569202-fd01-4825-a596-9f65ad563006",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "jsCode": "function getMsg(msg) {\n  return `\n    Role: ${msg.role}\n    Content: ${msg.content}\n    ---\n  `.trim();\n}\n\nreturn $input.all().map(x => {\n  const item = x.json;\n  let userMsg = '';\n\n  for (const msg of item.history.slice(1)) {\n    userMsg += `\\n${getMsg(msg)}\\n`;\n  }\n  \n  return {\n    system: item.history[0].content,\n    user: userMsg\n  };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5860,
        -100
      ],
      "id": "9c2e4439-c8fc-496f-af03-3e1bb25633b8",
      "name": "Prepare match prompt"
    },
    {
      "parameters": {
        "jsCode": "return $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        8360,
        -120
      ],
      "id": "bae836a2-8443-4bf3-9bef-4c3d6ce93c42",
      "name": "Display results"
    },
    {
      "parameters": {
        "content": "## LLM Response Validation",
        "height": 760,
        "width": 1720,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        6460,
        -220
      ],
      "id": "805928a6-1ee2-4c79-8a79-553ba4dcdf51",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "content": "## Result",
        "height": 460,
        "width": 500,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        8300,
        -260
      ],
      "id": "b1189e76-0c5d-484c-9253-15ee8e7ffb57",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "content": "## Saving result to google drive",
        "height": 640,
        "width": 1060
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        8940,
        -260
      ],
      "id": "ccafa68e-2035-4d3d-af7b-c627f8ed85f9",
      "name": "Sticky Note7"
    },
    {
      "parameters": {
        "jsCode": "return $('Format response').all().map(x => {\n  const markdown = $('Format health plan markdown').first().json.markdown;\n  const files = $input.all().map(x => x.json);\n  const markdownFileUrl = files.find(x => x.fileExtension === 'md').webViewLink;\n\n  return {\n    ...x.json,\n    markdown,\n    markdownFileUrl\n  }\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        10200,
        -40
      ],
      "id": "7c07c2b4-8da5-4fa5-ada6-24b36492952b",
      "name": "Output"
    },
    {
      "parameters": {
        "jsCode": "return $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        280,
        100
      ],
      "id": "ed3a22cf-9ea4-4785-a1c6-6837211cda84",
      "name": "Input data"
    },
    {
      "parameters": {
        "jsCode": "return $input.first().json.pathway.treatments;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2560,
        260
      ],
      "id": "4c607f72-0f20-479f-b3df-191c16d22da8",
      "name": "Get all interventions"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1,
      "position": [
        -300,
        60
      ],
      "id": "0aa8dfa7-f590-49e5-94b7-b0e100cedcc5",
      "name": "Execute Workflow Trigger",
      "disabled": true
    },
    {
      "parameters": {
        "operation": "toJson",
        "binaryPropertyName": "file",
        "options": {
          "format": true,
          "encoding": "utf8",
          "fileName": "=health-plan-{{ $json.generatedAt }}.json"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        9040,
        -120
      ],
      "id": "f4883569-680d-4645-8427-7fd874f2669d",
      "name": "Convert to JSON File"
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "markdown",
        "binaryPropertyName": "file",
        "options": {
          "encoding": "utf8",
          "fileName": "=health-plan-{{ $('Format response').first().json.generatedAt }}.md"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        9260,
        120
      ],
      "id": "da3c3769-8dd5-4414-a4c6-99c542e27de0",
      "name": "Convert to MD file"
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    \"pathwayUrl\": \"https://fhir.aera.health/fhir/R4/PlanDefinition/507faf19-f6bf-4257-877a-db170acde737\",\n    \"inverventionName\": \"\",\n    \"searchType\": \"RAG search\",\n    \"bloodResultsData\": [\n      {\n        \"name\": \"Fehérvérsejtszam\",\n        \"measurement\": \"5.6\",\n        \"unit\": \"Giga/L\"\n      },\n      {\n        \"name\": \"Vörösvérsejtszam\",\n        \"measurement\": \"4.8\",\n        \"unit\": \"Tera/L\"\n      },\n      {\n        \"name\": \"Hemoglobin\",\n        \"measurement\": \"142\",\n        \"unit\": \"g/L\"\n      },\n      {\n        \"name\": \"Hematokrit\",\n        \"measurement\": \"0.40\",\n        \"unit\": \"L/L\"\n      },\n      {\n        \"name\": \"MCV\",\n        \"measurement\": \"84\",\n        \"unit\": \"fL\"\n      },\n      {\n        \"name\": \"MCH\",\n        \"measurement\": \"30\",\n        \"unit\": \"pg\"\n      },\n      {\n        \"name\": \"MCHC\",\n        \"measurement\": \"352\",\n        \"unit\": \"g/L\"\n      },\n      {\n        \"name\": \"Trombocita\",\n        \"measurement\": \"265\",\n        \"unit\": \"Giga/L\"\n      },\n      {\n        \"name\": \"RDW-CV\",\n        \"measurement\": \"12.4\",\n        \"unit\": \"%\"\n      },\n      {\n        \"name\": \"MPV\",\n        \"measurement\": \"10.4\",\n        \"unit\": \"fL\"\n      },\n      {\n        \"name\": \"Neutrofil granulocita %\",\n        \"measurement\": \"55.9\",\n        \"unit\": \"%\"\n      },\n      {\n        \"name\": \"Limfocita %\",\n        \"measurement\": \"35.3\",\n        \"unit\": \"%\"\n      },\n      {\n        \"name\": \"Monocita %\",\n        \"measurement\": \"6.1\",\n        \"unit\": \"%\"\n      },\n      {\n        \"name\": \"Eozinofil granulocita %\",\n        \"measurement\": \"2.2\",\n        \"unit\": \"%\"\n      },\n      {\n        \"name\": \"Bazofil granulocita %\",\n        \"measurement\": \"0.5\",\n        \"unit\": \"%\"\n      },\n      {\n        \"name\": \"Neutrofil granulocita #\",\n        \"measurement\": \"3.12\",\n        \"unit\": \"Giga/L\"\n      },\n      {\n        \"name\": \"Limfocita #\",\n        \"measurement\": \"1.97\",\n        \"unit\": \"Giga/L\"\n      },\n      {\n        \"name\": \"Monocita #\",\n        \"measurement\": \"0.34\",\n        \"unit\": \"Giga/L\"\n      },\n      {\n        \"name\": \"Eozinofil granulocita #\",\n        \"measurement\": \"0.12\",\n        \"unit\": \"Giga/L\"\n      },\n      {\n        \"name\": \"Bazofil granulocita #\",\n        \"measurement\": \"0.03\",\n        \"unit\": \"Giga/L\"\n      },\n      {\n        \"name\": \"Éhgyomri glukóz (plazmából)\",\n        \"measurement\": \"4.7\",\n        \"unit\": \"mmol/L\"\n      },\n      {\n        \"name\": \"Karbamid\",\n        \"measurement\": \"4.0\",\n        \"unit\": \"mmol/L\"\n      },\n      {\n        \"name\": \"Kreatinin\",\n        \"measurement\": \"85\",\n        \"unit\": \"umol/L\"\n      },\n      {\n        \"name\": \"eGFR-EPI\",\n        \"measurement\": \">90\",\n        \"unit\": \"mL/min/1.7 3m2\"\n      },\n      {\n        \"name\": \"Húgysav\",\n        \"measurement\": \"393\",\n        \"unit\": \"umol/L\"\n      },\n      {\n        \"name\": \"Nátrium\",\n        \"measurement\": \"137\",\n        \"unit\": \"mmol/L\"\n      },\n      {\n        \"name\": \"Kálium\",\n        \"measurement\": \"4.3\",\n        \"unit\": \"mmol/L\"\n      },\n      {\n        \"name\": \"Kálcium\",\n        \"measurement\": \"2.45\",\n        \"unit\": \"mmol/L\"\n      },\n      {\n        \"name\": \"Foszfat\",\n        \"measurement\": \"1.12\",\n        \"unit\": \"mmol/L\"\n      },\n      {\n        \"name\": \"Magnézium\",\n        \"measurement\": \"0.77\",\n        \"unit\": \"mmol/L\"\n      },\n      {\n        \"name\": \"Összfehérje\",\n        \"measurement\": \"74\",\n        \"unit\": \"g/L\"\n      },\n      {\n        \"name\": \"Albumin\",\n        \"measurement\": \"43\",\n        \"unit\": \"g/L\"\n      },\n      {\n        \"name\": \"CRP\",\n        \"measurement\": \"5.6\",\n        \"unit\": \"mg/L\"\n      },\n      {\n        \"name\": \"Vas\",\n        \"measurement\": \"23.9\",\n        \"unit\": \"umol/L\"\n      },\n      {\n        \"name\": \"Transzferrin\",\n        \"measurement\": \"2.06\",\n        \"unit\": \"g/L\"\n      },\n      {\n        \"name\": \"Transzferrin szaturáció\",\n        \"measurement\": \"46\",\n        \"unit\": \"%\"\n      },\n      {\n        \"name\": \"Ferritin\",\n        \"measurement\": \"117\",\n        \"unit\": \"ug/L\"\n      },\n      {\n        \"name\": \"Folsav\",\n        \"measurement\": \"14.66\",\n        \"unit\": \"nmol/L\"\n      },\n      {\n        \"name\": \"B-12 Vitamin\",\n        \"measurement\": \"301\",\n        \"unit\": \"pmol/L\"\n      },\n      {\n        \"name\": \"Koleszterin\",\n        \"measurement\": \"6.4\",\n        \"unit\": \"mmol/L\"\n      },\n      {\n        \"name\": \"Trigliceridek\",\n        \"measurement\": \"1.01\",\n        \"unit\": \"mmol/L\"\n      },\n      {\n        \"name\": \"HDL-koleszterin\",\n        \"measurement\": \"1.59\",\n        \"unit\": \"mmol/L\"\n      },\n      {\n        \"name\": \"LDL-koleszterin\",\n        \"measurement\": \"4.15\",\n        \"unit\": \"mmol/L\"\n      },\n      {\n        \"name\": \"Non-HDL koleszterin, számitott\",\n        \"measurement\": \"4.8\",\n        \"unit\": \"mmol/L\"\n      },\n      {\n        \"name\": \"Bilirubin össz.\",\n        \"measurement\": \"12.8\",\n        \"unit\": \"umol/L\"\n      },\n      {\n        \"name\": \"GOT\",\n        \"measurement\": \"63\",\n        \"unit\": \"U/L\"\n      },\n      {\n        \"name\": \"GPT\",\n        \"measurement\": \"48\",\n        \"unit\": \"U/L\"\n      },\n      {\n        \"name\": \"Gamma-GT\",\n        \"measurement\": \"32\",\n        \"unit\": \"U/L\"\n      },\n      {\n        \"name\": \"Alkalikus foszfatáz\",\n        \"measurement\": \"91\",\n        \"unit\": \"U/L\"\n      },\n      {\n        \"name\": \"LDH\",\n        \"measurement\": \"545\",\n        \"unit\": \"U/L\"\n      },\n      {\n        \"name\": \"TSH\",\n        \"measurement\": \"2.630\",\n        \"unit\": \"mIU/L\"\n      },\n      {\n        \"name\": \"D Vitamin\",\n        \"measurement\": \"57.8\",\n        \"unit\": \"nmol/L\"\n      },\n      {\n        \"name\": \"Fajsúly\",\n        \"measurement\": \"1015\",\n        \"unit\": \"g/L\"\n      },\n      {\n        \"name\": \"pH\",\n        \"measurement\": \"6.5\",\n        \"unit\": \"IIII\"\n      },\n      {\n        \"name\": \"Fehérvérsejt\",\n        \"measurement\": \"0\",\n        \"unit\": \"/HPF\"\n      },\n      {\n        \"name\": \"Vörösvértest\",\n        \"measurement\": \"0\",\n        \"unit\": \"/HPF\"\n      },\n      {\n        \"name\": \"Laphámsejt\",\n        \"measurement\": \"0\",\n        \"unit\": \"/HPF\"\n      },\n      {\n        \"name\": \"Baktérium\",\n        \"measurement\": \"0\",\n        \"unit\": \"/HPF\"\n      },\n      {\n        \"name\": \"Cilinder\",\n        \"measurement\": \"0\",\n        \"unit\": \"/LPF\"\n      },\n      {\n        \"name\": \"Vesehámsejt (SRC)\",\n        \"measurement\": \"0\",\n        \"unit\": \"/HPF\"\n      },\n      {\n        \"name\": \"Sarjadzó gomba\",\n        \"measurement\": \"0\",\n        \"unit\": \"/HPF\"\n      },\n      {\n        \"name\": \"Kristaly\",\n        \"measurement\": \"0\",\n        \"unit\": \"/HPF\"\n      }\n    ],\n    \"questionnaireResultsData\": [\n      {\n        \"question\": \"Are you currently pregnant or planning to become pregnant in the next 6 months?\",\n        \"answer\": \"\"\n      },\n      {\n        \"question\": \"Do you have a history of heart disease, high blood pressure, or any cardiovascular conditions (e.g., heart attacks, strokes, arrhythmias)?\",\n        \"answer\": \"No\"\n      },\n      {\n        \"question\": \"Do you have any current or past gastrointestinal issues (e.g., ulcers, gastritis, esophageal problems, or other digestive disorders)?\",\n        \"answer\": \"Yes\"\n      },\n      {\n        \"question\": \"Do you have any current liver diseases (e.g., hepatitis, cirrhosis) or a history of liver problems?\",\n        \"answer\": \"Yes, fatty liver\"\n      },\n      {\n        \"question\": \"Do you have a history of cancer, or are you currently being treated for cancer?\",\n        \"answer\": \"No\"\n      },\n      {\n        \"question\": \"Do you have any allergies to foods, medications, or supplements, including but not limited to seeds, shellfish, saffron, or collagen?\",\n        \"answer\": \"No\"\n      },\n      {\n        \"question\": \"Do you suffer from any severe joint or musculoskeletal issues that limit movement or cause significant pain?\",\n        \"answer\": \"No\"\n      },\n      {\n        \"question\": \"Do you have severe sleep apnea or any chronic respiratory issues (e.g., asthma, COPD, or frequent breathing problems)?\",\n        \"answer\": \"No\"\n      },\n      {\n        \"question\": \"Do you have any diagnosed immune system disorders, such as autoimmune diseases or a history of severe immune deficiency?\",\n        \"answer\": \"No\"\n      },\n      {\n        \"question\": \"Do you have any history of kidney disease or current kidney-related conditions (e.g., kidney failure, renal disease)?\",\n        \"answer\": \"No\"\n      },\n      {\n        \"question\": \"Do you have a history of severe mental illness, including severe depression, schizophrenia, or other psychotic disorders?\",\n        \"answer\": \"No\"\n      },\n      {\n        \"question\": \"Do you currently take blood thinners or have any active bleeding disorders?\",\n        \"answer\": \"No\"\n      },\n      {\n        \"question\": \"Do you have any thyroid disorders (e.g., hypothyroidism, hyperthyroidism) or other hormonal conditions that are currently untreated or unmanaged?\",\n        \"answer\": \"No\"\n      },\n      {\n        \"question\": \"Are you allergic to any of the following: shellfish, milk, soy, gluten, or any other major food allergens?\",\n        \"answer\": \"No\"\n      },\n      {\n        \"question\": \"Do you have any severe, uncontrolled health conditions not listed above (e.g., uncontrolled diabetes, severe varicose veins, severe hypotension)?\",\n        \"answer\": \"No\"\n      }\n    ]\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -60,
        260
      ],
      "id": "f5deb54c-6a3e-4137-a4fb-ee8d10b2178a",
      "name": "Mock data"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -300,
        260
      ],
      "id": "e1c22b88-656e-4bdc-be1f-89296727b5af",
      "name": "Debug trigger",
      "disabled": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.history[1].content }}",
        "messages": {
          "messageValues": [
            {
              "message": "={{ $json.history[0].content }}"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [
        2760,
        780
      ],
      "id": "9cd6418d-4151-406e-98bf-8d9d1089304b",
      "name": "Generate RAG search queries",
      "retryOnFail": true
    },
    {
      "parameters": {
        "model": "gpt-4o",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        2840,
        980
      ],
      "id": "12d051b8-6e74-4894-a13e-0fa811b18a0d",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "efHlwehLp2xTvVDY",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const systemPrompt = `\nYou are an assistant tasked with generating precise **RAG search queries** to filter medications and treatments for a personalized Patient Health Plan.  \n\n### **Task Instructions:**  \n\n1. **Identify Key Moments**:  \n   Analyze the patient’s data to extract \"key moments,\" including:  \n   - Symptoms (e.g., \"Regularly gets tired\").  \n   - Lab results (e.g., \"Low B12\", \"Low Vitamin D\").  \n   - Hormone levels (e.g., \"Free Testosterone - 0.2 mol/L\").  \n   - Lifestyle factors or medical history (e.g., \"Busy life\", \"History of impotence\").  \n\n2. **Generate Specific Queries**:  \n   For each key moment, write a concise and actionable RAG search query targeting:  \n   - Relevant treatments or interventions.  \n   - Diagnostic recommendations.\n\n3. **Provide Reasoning**:  \n   For each query, include a brief explanation that outlines:  \n   - The relevance of the query to the patient’s condition.  \n   - Any contextual alignment with inclusion or exclusion triggers.  \n\n4. **Ensure Alignment**:  \n  Queries should align with inclusion and exclusion triggers for treatments and focus on personalized, effective options.  \n\n### **Examples:**  \n1. **Key Moment**: \"DHEA Sulphate - 2.5 umol/L\"  \n   **Query**: \"Find all medications with inclusion criteria for patients where DHEA sulphate levels are 6 umol/L or lower.\"  \n   **Reason**: \"DHEA sulphate is significantly low in this patient, and supplementation may improve hormone balance and energy levels.\"  \n\n2. **Key Moment**: \"Low Vitamin D\"  \n   **Query**: \"Retrieve all medications where the inclusion trigger specifies low Vitamin D levels. Include options with descriptions or criteria matching serum 25-hydroxyvitamin D levels below 50 nmol/L or related deficiencies.\"  \n   **Reason**: \"The patient has a documented deficiency, and targeted supplementation may improve bone health and fatigue.\"  \n\n3. **Key Moment**: \"History of impotence for 15 years\"  \n   **Query**: \"Retrieve testosterone replacement options for men with low free testosterone. Include therapies compatible with a history of impotence and consider implications for new relationships.\"  \n   **Reason**: \"Testosterone deficiency may contribute to erectile dysfunction and decreased libido, which are affecting the patient’s quality of life.\"  \n`.trim();\n\nconst userPrompt = `\nUser data:\n\n${$('Generate patient anamnesis').first().json.anamnesis}\n`.trim();\n\nreturn [\n  {\n    history: [\n      {\n        role: 'system',\n        content: systemPrompt\n      },\n      {\n        role: 'assistant',\n        content: userPrompt\n      }\n    ]\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2420,
        780
      ],
      "id": "51a0d467-e706-400c-8b67-805528f171a0",
      "name": "Prepare prompt for RAG queries generation"
    },
    {
      "parameters": {
        "model": "gpt-4o",
        "options": {
          "responseFormat": "json_object"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        3160,
        1000
      ],
      "id": "ea0941ac-2eb9-4b42-b001-2333d3b7452f",
      "name": "OpenAI Chat Model2",
      "credentials": {
        "openAiApi": {
          "id": "efHlwehLp2xTvVDY",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\t\"queries\": [\n      {\n        \"query\": \"Query text\",\n        \"reason\": \"Reason for generated query\"\n      }\n    ]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        3320,
        1000
      ],
      "id": "7e156e1c-1749-4928-8d8c-6e9b9307def0",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=# Message History\n\n**System:**\n{{ $('Prepare prompt for RAG queries generation').item.json.history[0].content }}\n\n**User:**\n{{ $('Prepare prompt for RAG queries generation').item.json.history[1].content }}\n\n**Assistant:**\n{{ $json.text }}",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "Format your response in JSON format."
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [
        3120,
        780
      ],
      "id": "dc462edc-25c1-421c-ab5c-9a1c92144778",
      "name": "Format as JSON",
      "retryOnFail": true
    },
    {
      "parameters": {
        "fieldToSplitOut": "output.queries",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        3520,
        780
      ],
      "id": "d1059cf7-9e57-46d7-a822-0476826e0033",
      "name": "Split Out"
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    kernelMemory: {\n      baseUrl: 'http://kernel_service:9001',\n      collectionIndex: 'interventionsv1'\n    },\n    ragSearchInterventionsLimit: 20\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        520,
        100
      ],
      "id": "2d2cd583-5161-4c21-8fd1-79e06a052863",
      "name": "Config"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Config').first().json.kernelMemory.baseUrl }}/search",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"index\": \"{{ $('Config').first().json.kernelMemory.collectionIndex }}\",\n  \"query\": \"{{ $json.query }}\",\n  \"filters\": [\n    {\n      \"pathwayUrl\": [\n        \"{{ $('Input data').first().json.pathwayUrl }}\"\n      ]\n    }\n  ],\n  \"limit\": 3,\n  \"args\": {\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3780,
        780
      ],
      "id": "6181a3f9-3c40-48ed-8cff-7144efcc9a81",
      "name": "Search Intervention Items"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "43beaefd-26bf-48fd-a304-6b222c0c8e3c",
              "leftValue": "={{ $json.noResult }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        4000,
        780
      ],
      "id": "95c546a1-a5d4-407c-b441-7dc7164843c3",
      "name": "If no results"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        4340,
        700
      ],
      "id": "272338c9-ca47-4b15-9a7a-c18ccf2c4595",
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {
        "jsCode": "return $input.all().map(x => x.json.intervention);"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4680,
        900
      ],
      "id": "8bdcb14d-6d0f-471b-9cfb-91a56019f6f4",
      "name": "Map to interventions"
    },
    {
      "parameters": {
        "content": "## RAG based interventions filtering",
        "height": 560,
        "width": 2600
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2300,
        620
      ],
      "id": "733dcadb-cd67-4643-817b-41bdd76f49a2",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "jsCode": "function reverseFlat(array, maxItems) {\n    const result = [];\n    const maxRowLength = Math.max(...array.map(x => x.results.length));\n    \n    for (let i = 0; i < maxRowLength; ++i) {\n        for (let j = 0; j < array.length; ++j) {\n            if (i >= array[j].results.length)\n                continue;\n                \n            const item = array[j].results[i];\n            \n            if (result.find(x => x.item.documentId == item.documentId))\n                continue;\n            \n            result.push({\n              query: array[j].query,\n              item\n            });\n                \n            if (result.length == maxItems)\n                return result;\n        }\n    }\n    \n    return result;\n}\n\n// ================================================================= //\n\n// all items sorted by first match result relevance (desc)\nconst queriesResults = $input\n  .all()\n  .map(x => x.json)\n  .sort((a, b) => {\n    const getRev = (x) => x.results[0].partitions[0].relevance;\n    return getRev(b) - getRev(a);\n  })\n  ;\n\nconsole.log(\"1\", items);\n\nconst itemsLimit = $('Config').first().json.ragSearchInterventionsLimit;\n\nconst resultItems = reverseFlat(queriesResults, items);\n\nconst pathway = $('Extract Pathway from File').first().json.pathway;\n\nreturn resultItems.map(x => {\n  const intervention = pathway.treatments.find(t => t.name.toLowerCase() === x.item.partitions[0].tags['name'][0].toLowerCase());\n\n  return {\n    ...x,\n    intervention\n  }\n}).filter(x => !!x.intervention);"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4340,
        900
      ],
      "id": "dd9ae693-88ad-4fec-b336-3453b7e0d45f",
      "name": "Prefilter and limit interventions by search results"
    }
  ],
  "pinData": {},
  "connections": {
    "Generate patient anamnesis": {
      "main": [
        [
          {
            "node": "Search Health Plan Template",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Health Plan Template": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Download pathway",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Stop and Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download pathway": {
      "main": [
        [
          {
            "node": "Extract Pathway from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Pathway from File": {
      "main": [
        [
          {
            "node": "Switch filter interventions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Match intervention by searched name": {
      "main": [
        [
          {
            "node": "Check filtered result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check filtered result": {
      "main": [
        [
          {
            "node": "Map results to final object",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Stop and Error2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Match item",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "TreatmentMatchResult Parser": {
      "ai_outputParser": [
        [
          {
            "node": "To JSON format",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Limit 2": {
      "main": [
        [
          {
            "node": "Map results to final object",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "To JSON format": {
      "main": [
        [
          {
            "node": "Prepare validation prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare validation prompt": {
      "main": [
        [
          {
            "node": "Validate result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Validate result",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Map results to final object": {
      "main": [
        [
          {
            "node": "Prepare initial prompts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare initial prompts": {
      "main": [
        [
          {
            "node": "Start point",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "gpt-4o JSON": {
      "ai_languageModel": [
        [
          {
            "node": "Validate result",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "To JSON format",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Start point": {
      "main": [
        [
          {
            "node": "Prepare match prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Map to result model for loop": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Display results",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Check if last result is valid",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if last result is valid": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Start point",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format response": {
      "main": [
        [
          {
            "node": "Convert to JSON File",
            "type": "main",
            "index": 0
          },
          {
            "node": "Format health plan markdown",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format health plan markdown": {
      "main": [
        [
          {
            "node": "Convert to MD file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Google Drive",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Drive": {
      "main": [
        [
          {
            "node": "Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Match item": {
      "main": [
        [
          {
            "node": "To JSON format",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate result": {
      "main": [
        [
          {
            "node": "Map to result model for loop",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare match prompt": {
      "main": [
        [
          {
            "node": "Match item",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Display results": {
      "main": [
        [
          {
            "node": "Format response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Input data": {
      "main": [
        [
          {
            "node": "Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch filter interventions": {
      "main": [
        [
          {
            "node": "Match intervention by searched name",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get all interventions",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get all interventions",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Prepare prompt for RAG queries generation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get all interventions": {
      "main": [
        [
          {
            "node": "Limit 2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow Trigger": {
      "main": [
        [
          {
            "node": "Input data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to JSON File": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to MD file": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Mock data": {
      "main": [
        [
          {
            "node": "Input data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Debug trigger": {
      "main": [
        [
          {
            "node": "Mock data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Generate RAG search queries",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Generate RAG search queries": {
      "main": [
        [
          {
            "node": "Format as JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare prompt for RAG queries generation": {
      "main": [
        [
          {
            "node": "Generate RAG search queries",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Format as JSON",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Format as JSON",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Format as JSON": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Search Intervention Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Config": {
      "main": [
        [
          {
            "node": "Generate patient anamnesis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Intervention Items": {
      "main": [
        [
          {
            "node": "If no results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If no results": {
      "main": [
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Prefilter and limit interventions by search results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Map to interventions": {
      "main": [
        [
          {
            "node": "Map results to final object",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prefilter and limit interventions by search results": {
      "main": [
        [
          {
            "node": "Map to interventions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "47d81d2d-3feb-4397-8aa0-63e81fa97b6a",
  "meta": {
    "instanceId": "558d88703fb65b2d0e44613bc35916258b0f0bf983c5d4730c00c424b77ca36a"
  },
  "id": "FlTNy7Ck4cdbyZoi",
  "tags": []
}