{
  "name": "Aera assistant",
  "nodes": [
    {
      "parameters": {
        "jsCode": "return $('Input data').all().map(x => {\n  const item = x.json;\n  let patientAnamnesis = '';\n\n  if (item.patientProfile) {\n    patientAnamnesis += `\n      # Patient profile\n\n      ${item.patientProfile}\n\n      ---\n      \n    `;\n  }\n  \n  if (item.bloodResultsData) {\n    patientAnamnesis += `\n      # Blood test results\n    \n      ${JSON.stringify(item.bloodResultsData)}\n\n      ${!!patientAnamnesis ? '---' : ''}\n      \n    `;\n  }\n\n  if (item.questionnaireResultsData) {\n    patientAnamnesis += `\n      # Questionnaire results\n\n      ${JSON.stringify(item.questionnaireResultsData)}\n      \n      ${!!patientAnamnesis ? '---' : ''}\n      \n    `;\n  }\n  \n  return {\n    anamnesis: patientAnamnesis.trim()\n  };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        780,
        100
      ],
      "id": "4b6dc917-de68-4d34-8cf3-ca5b383b336f",
      "name": "Generate patient anamnesis"
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "resource": "fileFolder",
        "queryString": "={{ $('Input data').first().json.pathwayUrl }}",
        "limit": 1,
        "filter": {
          "folderId": {
            "__rl": true,
            "value": "13gNzGBlb92BhyBQ10pcx1w6D0PJqqVXq",
            "mode": "list",
            "cachedResultName": "health-plans",
            "cachedResultUrl": "https://drive.google.com/drive/folders/13gNzGBlb92BhyBQ10pcx1w6D0PJqqVXq"
          }
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        1020,
        100
      ],
      "id": "4cbfe618-a690-4157-a112-97b2dbacb665",
      "name": "Search Health Plan Template",
      "alwaysOutputData": true,
      "credentials": {
        "googleApi": {
          "id": "XlFwzHsP62pz7O9I",
          "name": "Google Service Account account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "edc8d4a4-2f27-4d70-869e-78a473e5b1b4",
              "leftValue": "={{ $json.isNotEmpty() }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1240,
        100
      ],
      "id": "1bf58906-2c8f-46ba-9fcb-bf7e04705549",
      "name": "If"
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        },
        "options": {
          "binaryPropertyName": "pathwayBinary"
        }
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        1480,
        -80
      ],
      "id": "3620e34d-d7fa-4945-a55c-dde1ded4e431",
      "name": "Download pathway",
      "credentials": {
        "googleApi": {
          "id": "XlFwzHsP62pz7O9I",
          "name": "Google Service Account account"
        }
      }
    },
    {
      "parameters": {
        "errorMessage": "=Pathway could not be found by URL: \"{{ $('On form submission').first().json['Pathway URL'] }}\""
      },
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        1480,
        220
      ],
      "id": "31e8eb94-5d24-401c-b008-1ed85f4901a7",
      "name": "Stop and Error"
    },
    {
      "parameters": {
        "operation": "fromJson",
        "binaryPropertyName": "pathwayBinary",
        "destinationKey": "pathway",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1740,
        -80
      ],
      "id": "181bf9dc-b4c8-4090-8ef7-1b7968f94b69",
      "name": "Extract Pathway from File"
    },
    {
      "parameters": {
        "content": "## Resolving Pathway",
        "height": 540,
        "width": 980
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        960,
        -140
      ],
      "id": "1c003290-437f-460d-afe7-91ae85dc84f8",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## Triggers",
        "height": 480,
        "width": 500,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -660,
        -40
      ],
      "id": "b7f5cc75-65e5-4682-92cf-a50173b72077",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "jsCode": "const treatments = $input.first().json.pathway[0].treatments;\nconst searchedInterventionName = $('Input data').first().json.inverventionName;\n\nreturn treatments.filter(x => x.name === searchedInterventionName);"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2560,
        -80
      ],
      "id": "a862f811-0eff-40bc-ac14-6d505ab67517",
      "name": "Match intervention by searched name"
    },
    {
      "parameters": {
        "content": "## Filter intervention list",
        "height": 640,
        "width": 1120
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2080,
        -160
      ],
      "id": "042a8cd6-c435-46c2-9c93-371804e98a5d",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "9b7b0663-6573-4e23-9f30-143b24619304",
              "leftValue": "={{ $json.name }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2800,
        -80
      ],
      "id": "db785091-ff81-4178-b26c-00cc71de0e39",
      "name": "Check filtered result"
    },
    {
      "parameters": {
        "errorMessage": "=Intervention item is not matched by name: {{ $('On form submission').first().json['Intervention name'] }}"
      },
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        3040,
        20
      ],
      "id": "46f82cba-fa69-4c79-b092-7afb37787732",
      "name": "Stop and Error2"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Input data').first().json.inverventionName }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "notEmpty",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Search by intervention name"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "0342270e-7267-4dab-a132-81a73af16fac",
                    "leftValue": "={{ $('Input data').first().json.searchType }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "empty",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Default"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "5be85ca7-d8e8-4d4f-8f38-1481de8d949a",
                    "leftValue": "={{ $('Input data').first().json.searchType }}",
                    "rightValue": "Full search",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Full search"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "4b021816-9d55-4e89-aad0-769592cbe19f",
                    "leftValue": "={{ $('Input data').first().json.searchType }}",
                    "rightValue": "RAG search",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "RAG based search"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        2160,
        120
      ],
      "id": "8268483c-9a26-4d97-bbde-6cdf0e3c2566",
      "name": "Switch filter interventions"
    },
    {
      "parameters": {
        "jsCode": "return $input.all().map(x => {\n  return {\n    originItem: x.json,\n    // will be populated later\n    matchResult: null,\n    matchedDosage: null,\n    validationResults: [],\n    history: []\n  };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5200,
        -100
      ],
      "id": "83a8f232-9092-44ca-8939-c383d4d952ce",
      "name": "Map results to final object"
    },
    {
      "parameters": {
        "jsCode": "function prompt(medicationData) {\n  return `\nYou are a preventive medicine doctor assistant. Your task is to determine if a medication should be applied to a patient based on patient data and select the appropriate dosage.\n\nTo complete this task:\n\n1. **Evaluate Medication Criteria**: \n - Review both \\`inclusionTrigger\\` and \\`exclusionTrigger\\` conditions in the medication. \n - Match these conditions to the patient's data, considering all available information in their medical profile, history, and lab results.\n - **Inclusion Criteria Confirmation**. Ensure inclusion criteria are explicitly confirmed by available patient data; do not infer or assume patient conditions.\n - Ensure exclusion criteria do not conflict for the medication to be recommended. Exclusion criteria may remain partially unverified if the required patient data is unavailable.\n - Consider reviewing other properties such as \\`objective\\`, \\`benefit\\`, \\`supportingActivities\\` and other properties when reasoning and making decision.\n\n2. **Select Dosage**: After confirming the medication is suitable:\n - Review the \\`dosages\\` list to find the smallest effective dosage that meets the dosage inclusion criteria for the patient’s condition without conflicting with any dosage exclusion criteria.\n - If no dosage matches without conflicts, indicate this in the response.\n\n3. **Select option**: Review patient or doctor preferences and choose medication option (form) if \\`options\\` are specified.\n\n4. **Provide reasoning with citations on patient data.** Examples of reasoning:\n - The patient's blood pressure is reported as normal in their lab results (Lab Result: \"BP\" Measurement: \"120/80 mmHg\"), and there are no indications of hypertension in their medical history. The inclusion criterion for elevated blood pressure is not met.\n - **Current DHEA Level:** 5.5 umol/L - this qualifies for the dosages where DHEA levels are 6 umol/L or lower. **15 mg DHEA** is the smallest dosage option that addresses the current DHEA level requirement (6 umol/L or lower).\n\n**Medication data**:\n\n${JSON.stringify(medicationData)}\n`.trim();\n}\n\nconst anamnesis = $('Generate patient anamnesis').first().json.anamnesis;\nconst userPrompt = `\n### **Patient data:**\n\n${anamnesis}\n`.trim();\n\nreturn $input.all().map(x => {\n  return {\n    ...x.json,\n    history: [\n      {\n        role: 'system',\n        content: prompt(x)\n      },\n      {\n        role: 'user',\n        content: userPrompt\n      }\n    ]\n  };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5500,
        -100
      ],
      "id": "e0098a34-2e5f-4f9e-b924-c2777f9d1d3b",
      "name": "Prepare initial prompts"
    },
    {
      "parameters": {
        "jsCode": "const finisedAt = $now;\nconst data = $('Started at').first().json;\nconst startedAt = DateTime.fromISO(data.startedAt);\nconst diff = finisedAt.diff(startedAt);\n\nreturn [\n  {\n    interventionItems: $input.all().map(x => x.json),\n    executionTime: diff.as('seconds'),\n    generatedAt: finisedAt.toISO(),\n    timestamp: data.timestamp\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        8460,
        -100
      ],
      "id": "4898644e-54ad-45ae-8c2e-9efbb4d82d3a",
      "name": "Format response"
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "inputDataFieldName": "file",
        "name": "={{ $input.item.binary.file.fileName }}",
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "value": "1h5xcHGWF-lwHMp5x_OtPKqcyU1zw5ejg",
          "mode": "list",
          "cachedResultName": "responses",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1h5xcHGWF-lwHMp5x_OtPKqcyU1zw5ejg"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        9860,
        -20
      ],
      "id": "1d3314af-a61d-4d48-b509-8a7d3fd264bf",
      "name": "Google Drive",
      "credentials": {
        "googleApi": {
          "id": "XlFwzHsP62pz7O9I",
          "name": "Google Service Account account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "function printMatches(matchedItems) {\n  let markdown = '';\n  \n  for (let index = 0; index < matchedItems.length; index++) {\n    const item = matchedItems[index];\n    const intervention = item.originItem;\n    const matchResult = item.matchResult;\n    const matchedDosage = item.matchedDosage;\n    const reason = matchResult.recommendationReason ? matchResult.recommendationReason : matchResult.notRecommendationReason;\n  \n    markdown += `**${index + 1}. ${intervention.name}**\\n`;\n\n    if (reason) {\n      markdown += `  - Reason: ${reason}\\n`;\n    }\n\n    const retries = item.validationResults.length - 1;\n\n    markdown += `  - Retries: ${retries}\\n`;\n\n    if (!matchResult.isRecommended) {\n      markdown += '\\n';\n      continue;\n    }\n  \n    if (matchResult.option) {\n      markdown += `  - Option: ${matchResult.option}\\n`;\n    }\n  \n    if (matchedDosage) {\n      markdown += `  - Dosage: ${matchedDosage.dosage}\\n`;\n      markdown += `  - Dosage Frequency: ${matchedDosage.frequency}\\n`;\n  \n      if (matchedDosage.option) {\n        markdown += `  - Dosage option: ${matchedDosage.option}\\n`;\n      }\n    }\n    else {\n      markdown += `  - Dosage: not matched\\n`;\n      markdown += `  - Not Matched Dosage from: ${matchResult.dosage.dosage}\\n`\n    }\n  \n    if (matchResult.recommendationReason) {\n      markdown += `  - Dosage recommendation reason: ${matchResult.recommendationReason}\\n`\n    }\n  \n    if (intervention.dossingInstructions) {\n      markdown += `  - Dossign instructions: ${intervention.dossingInstructions}\\n`;\n    }\n  \n    markdown += '\\n';\n  }\n\n  return markdown;\n}\n\nlet markdown = ``;\nlet data = $input.first().json;\n\nmarkdown += '# Health Plan\\n\\n';\nmarkdown += `Generated at: ${DateTime.fromISO(data.generatedAt).toLocaleString(DateTime.DATETIME_SHORT_WITH_SECONDS)}\\n`;\nmarkdown += `Execution time: ${data.executionTime}\\n\\n`;\n\nmarkdown += '## Matched items\\n\\n';\n\nconst matchedItems = data.interventionItems.filter(x => x.matchResult.isRecommended);\n\nif (matchedItems.length > 0) {\n  markdown += printMatches(matchedItems);\n} else {\n  markdown += '**No matches**\\n';\n}\n\nmarkdown += '\\n';\n\nmarkdown += '## NOT Matched items\\n\\n';\n\nconst notMatchedItems = data.interventionItems.filter(x => !x.matchResult.isRecommended);\n\nif (notMatchedItems.length > 0) {\n  markdown += printMatches(notMatchedItems);\n} else {\n  markdown += '**No matches**\\n';\n}\n\nreturn [\n  {\n    markdown\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        8880,
        140
      ],
      "id": "c412be45-c0a7-4c80-8490-975479ca70cd",
      "name": "Format health plan markdown"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        9540,
        -20
      ],
      "id": "4ad3ad84-7ca8-4f10-af91-08fe14a6b540",
      "name": "Merge"
    },
    {
      "parameters": {
        "content": "## Intervention matching",
        "height": 740,
        "width": 2480
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        5060,
        -280
      ],
      "id": "1b569202-fd01-4825-a596-9f65ad563006",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "content": "## Result",
        "height": 480,
        "width": 880,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        7720,
        -240
      ],
      "id": "b1189e76-0c5d-484c-9253-15ee8e7ffb57",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "content": "## Saving result to google drive",
        "height": 880,
        "width": 1380
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        8760,
        -240
      ],
      "id": "ccafa68e-2035-4d3d-af7b-c627f8ed85f9",
      "name": "Sticky Note7"
    },
    {
      "parameters": {
        "jsCode": "return $('Format response').all().map(x => {\n  // const markdown = $('Format health plan markdown').first().json.markdown;\n  const files = $input.all().map(x => x.json);\n  // const markdownFileUrl = files.find(x => x.fileExtension === 'md').webViewLink;\n  const fileId = files.find(x => x.fileExtension === 'html').id;\n\n  return {\n    ...x.json,\n    // markdown,\n    // markdownFileUrl,\n    htmlUrl: `${$('Config').first().json.selfUrl}/webhook/file?id=${fileId}`\n  }\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        10240,
        -20
      ],
      "id": "7c07c2b4-8da5-4fa5-ada6-24b36492952b",
      "name": "Output"
    },
    {
      "parameters": {
        "jsCode": "return $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        0,
        100
      ],
      "id": "ed3a22cf-9ea4-4785-a1c6-6837211cda84",
      "name": "Input data"
    },
    {
      "parameters": {
        "jsCode": "return $input.first().json.pathway.treatments;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2560,
        260
      ],
      "id": "4c607f72-0f20-479f-b3df-191c16d22da8",
      "name": "Get all interventions"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1,
      "position": [
        -580,
        60
      ],
      "id": "0aa8dfa7-f590-49e5-94b7-b0e100cedcc5",
      "name": "Execute Workflow Trigger",
      "disabled": true
    },
    {
      "parameters": {
        "operation": "toJson",
        "binaryPropertyName": "file",
        "options": {
          "format": true,
          "encoding": "utf8",
          "fileName": "=health-plan-{{ $json.timestamp }}.json"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        8880,
        -100
      ],
      "id": "f4883569-680d-4645-8427-7fd874f2669d",
      "name": "Convert to JSON File"
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "markdown",
        "binaryPropertyName": "file",
        "options": {
          "encoding": "utf8",
          "fileName": "=health-plan-{{ $json.timestamp }}.md"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        9100,
        140
      ],
      "id": "da3c3769-8dd5-4414-a4c6-99c542e27de0",
      "name": "Convert to MD file"
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    // \"pathwayUrl\": \"https://fhir.aera.health/fhir/R4/PlanDefinition/507faf19-f6bf-4257-877a-db170acde737\",\n    \"pathwayUrl\": \"https://fhir.aera.health/fhir/R4/PlanDefinition/2124af55-22b3-44e3-abeb-dfa750e3ea41\",\n    \"inverventionName\": \"\",\n    \"searchType\": \"RAG search\",\n    \"bloodResultsData\":\n    {\n        \"date\": \"05/06/2023\",\n        \"results\":\n        [\n            {\n                \"test\": \"HAEMOGLOBIN\",\n                \"range\": \"130 - 170\",\n                \"unit\": \"g/L\",\n                \"value\": 147\n            },\n            {\n                \"test\": \"HCT\",\n                \"range\": \"0.37 - 0.50\",\n                \"value\": 0.448\n            },\n            {\n                \"test\": \"RED CELL COUNT\",\n                \"range\": \"4.40 - 5.80\",\n                \"unit\": \"x10^12/L\",\n                \"value\": 4.78\n            },\n            {\n                \"test\": \"MCV\",\n                \"range\": \"80 - 99\",\n                \"unit\": \"fL\",\n                \"value\": 93.7\n            },\n            {\n                \"test\": \"MCH\",\n                \"range\": \"27.0 - 33.5\",\n                \"unit\": \"pg\",\n                \"value\": 30.8\n            },\n            {\n                \"test\": \"MCHC\",\n                \"range\": \"300 - 350\",\n                \"unit\": \"g/L\",\n                \"value\": 328\n            },\n            {\n                \"test\": \"RDW\",\n                \"range\": \"11.5 - 15.0\",\n                \"value\": 12.0\n            },\n            {\n                \"test\": \"PLATELET COUNT\",\n                \"range\": \"150 - 400\",\n                \"unit\": \"x10^9/L\",\n                \"value\": 174\n            },\n            {\n                \"test\": \"MPV\",\n                \"range\": \"7 - 13\",\n                \"unit\": \"fL\",\n                \"value\": 10.9\n            },\n            {\n                \"test\": \"WHITE CELL COUNT\",\n                \"range\": \"3.0 - 10.0\",\n                \"unit\": \"x10^9/L\",\n                \"value\": 5.95\n            },\n            {\n                \"test\": \"Neutrophils\",\n                \"range\": \"2.0 - 7.5\",\n                \"unit\": \"x10^9/L\",\n                \"value\": 3.43,\n                \"percentage\": 57.6\n            },\n            {\n                \"test\": \"Lymphocytes\",\n                \"range\": \"1.2 - 3.65\",\n                \"unit\": \"x10^9/L\",\n                \"value\": 2.02,\n                \"percentage\": 33.9\n            },\n            {\n                \"test\": \"Monocytes\",\n                \"range\": \"0.2 - 1.0\",\n                \"unit\": \"x10^9/L\",\n                \"value\": 0.44,\n                \"percentage\": 7.4\n            },\n            {\n                \"test\": \"Eosinophils\",\n                \"range\": \"0.0 - 0.4\",\n                \"unit\": \"x10^9/L\",\n                \"value\": 0.05,\n                \"percentage\": 0.8\n            },\n            {\n                \"test\": \"Basophils\",\n                \"range\": \"0.0 - 0.1\",\n                \"unit\": \"x10^9/L\",\n                \"value\": 0.02,\n                \"percentage\": 0.3\n            },\n            {\n                \"test\": \"ALBUMIN\",\n                \"range\": \"34 - 50\",\n                \"unit\": \"g/L\",\n                \"value\": 46\n            },\n            {\n                \"test\": \"Prostate Specific Ag (Total)\",\n                \"range\": \"0.00 - 2.99\",\n                \"unit\": \"ug/L\",\n                \"value\": 0.29\n            },\n            {\n                \"test\": \"FOLLICLE STIM. HORMONE\",\n                \"range\": \"1.5 - 12.4\",\n                \"unit\": \"IU/L\",\n                \"value\": 3.3\n            },\n            {\n                \"test\": \"LUTEINISING HORMONE\",\n                \"range\": \"1.7 - 8.6\",\n                \"unit\": \"IU/L\",\n                \"value\": 2.5\n            },\n            {\n                \"test\": \"PROGESTERONE\",\n                \"range\": \"0.2 - 0.5\",\n                \"unit\": \"nmol/L\",\n                \"value\": 0.5\n            },\n            {\n                \"test\": \"TESTOSTERONE\",\n                \"range\": \"7.6 - 31.4\",\n                \"unit\": \"nmol/L\",\n                \"value\": 20.8\n            },\n            {\n                \"test\": \"SEX HORMONE BINDING GLOB\",\n                \"range\": \"19 - 83\",\n                \"unit\": \"nmol/L\",\n                \"value\": 70\n            },\n            {\n                \"test\": \"PROLACTIN\",\n                \"range\": \"86 - 324\",\n                \"unit\": \"mIU/L\",\n                \"value\": 113\n            },\n            {\n                \"test\": \"17-Beta OESTRADIOL\",\n                \"range\": \"< 192\",\n                \"unit\": \"pmol/L\",\n                \"value\": 81\n            },\n            {\n                \"test\": \"D.H.E.A. Sulphate\",\n                \"range\": \"0.44 - 13.4\",\n                \"unit\": \"umol/L\",\n                \"value\": 5.7\n            },\n            {\n                \"test\": \"Free Testosterone\",\n                \"range\": \"5.0 - 21.0\",\n                \"unit\": \"pg/ml\",\n                \"value\": 8.2\n            },\n            {\n                \"test\": \"Dihydrotestosterone\",\n                \"range\": \"0.33 - 3.01\",\n                \"unit\": \"nmol/L\",\n                \"value\": 1.61\n            }\n        ]\n    },\n    \"questionnaireResultsData\": null,\n    \"patientProfile\": \"# Patient profile\\r\\n\\r\\n- Age: 58\\r\\n- DOB: 1966\\r\\n- Gender: male\\r\\n- Symptoms: Insomnia, fatigue, afternoon tiredness, lower energy levels, work stress\\r\\n\\r\\n---\\r\\n\\r\\n# Social  \\r\\n\\r\\n**Date: 12\\/02\\/2020**  \\r\\n- otherwise well  \\r\\n- 40-50 press-ups 2-3 x weekly, Personal trainer weekly, run with the dog 1 time a week - 5k, Golf occasionally, walks to and from station - 2km each way - 4x weekly, rugby training on Sundays with son - but less as son broke ankle 6 months ago (12 years old)  \\r\\n- Eats 3x a day, healthy. Son is vegan, so more towards vegetarian  \\r\\n\\r\\n**Date: 10\\/09\\/2018**  \\r\\n- Ex-Cigar Smoker  \\r\\n\\r\\n**Date: 11\\/05\\/2017**  \\r\\n- Last Nov opticians - astigmatisim, left eye weaker than right, has glasses but doesn't wear it. Last saw dentist Jan 2017, sees dentist 6 monthly.  \\r\\n- Non-smoker  \\r\\n- 3-4 times a week  \\r\\n- 1-2 hours per week  \\r\\n- company director  \\r\\n- Smoked for 28 years, 20 a day, 28 pack day history  \\r\\n- Married  \\r\\n- Light drinker - 1-2u\\/day  \\r\\n\\r\\n---\\r\\n\\r\\n# Medical history  \\r\\n\\r\\n**Date: 07\\/06\\/2023**  \\r\\n- Discussed sharing records with NHS practice  \\r\\n\\r\\n**Date: 25\\/03\\/2023**  \\r\\n- Generally well. CAJCOLD+ left medial collar bone: 5mmx3mm irregularly bordered papule. Uniform hypopigmented colour. No central depression, no flaking, no other sinister characteristics.  \\r\\n\\r\\n**Date: 01\\/11\\/2021**  \\r\\n- Systolic BP: 110  \\r\\n- Diastolic BP: 72  \\r\\n\\r\\n**Date: 10\\/02\\/2021**  \\r\\n- Weight: 90.2  \\r\\n- BMI: 28.47  \\r\\n\\r\\n**Date: 05\\/12\\/2020**  \\r\\n- Blood Pressure: 121.78  \\r\\n\\r\\n**Date: 12\\/02\\/2020**  \\r\\n- Height: 178  \\r\\n\\r\\n**Date: 10\\/09\\/2018**  \\r\\n- Pulse: 77  \\r\\n- well chest clear GAEB PR regular sats 98%, PR 77 bpm, glands NAD, good colour CRT <2 seconds  \\r\\n\\r\\n**Date: 27\\/10\\/2017**  \\r\\n- Blood Oxygen: 97  \\r\\n- lungs clear, good a\\/e, abdo soft non tender, bs normal, no organomegaly, well hydrated, HS 1 and 2, and nil else  \\r\\n\\r\\n---\\r\\n\\r\\n# Medication  \\r\\n\\r\\n**Date: 12\\/02\\/2020**  \\r\\n- Omega 3 and Krill oil\\r\\n\\r\\n**Date: 10\\/09\\/2018**  \\r\\n- aspirin 75mg  \\r\\n\\r\\n**Date: 05\\/01\\/2017**  \\r\\n- nil  \\r\\n\\r\\n---\\r\\n\\r\\n# Family history  \\r\\n\\r\\n**Date: 10\\/09\\/2018**  \\r\\n- Younger brother recently Dx AF at 47yo  \\r\\n\\r\\n**Date: 11\\/05\\/2017**  \\r\\n- Unsure of who father is  \\r\\n- Mum: 75 years old - OA  \\r\\n- Has two brothers  \\r\\n- Brothers have no medical problems  \\r\\n- Mum has AF  \\r\\n- Brother-in-law: Prostate cancer  \\r\\n\\r\\n---\\r\\n\\r\\n# Allergy  \\r\\n\\r\\n**Date: 05\\/01\\/2017**  \\r\\n- NKDA\\r\\n\"\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -340,
        260
      ],
      "id": "f5deb54c-6a3e-4137-a4fb-ee8d10b2178a",
      "name": "Mock data"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -580,
        260
      ],
      "id": "e1c22b88-656e-4bdc-be1f-89296727b5af",
      "name": "Debug trigger",
      "disabled": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.history[1].content }}",
        "messages": {
          "messageValues": [
            {
              "message": "={{ $json.history[0].content }}"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [
        2820,
        740
      ],
      "id": "9cd6418d-4151-406e-98bf-8d9d1089304b",
      "name": "Generate RAG search queries",
      "retryOnFail": true,
      "waitBetweenTries": 5000,
      "maxTries": 5
    },
    {
      "parameters": {
        "model": "gpt-4o",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        2900,
        940
      ],
      "id": "12d051b8-6e74-4894-a13e-0fa811b18a0d",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "efHlwehLp2xTvVDY",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const systemPrompt = `\nYou are an assistant tasked with generating precise **RAG search queries** to filter medications and treatments for a personalized Patient Health Plan.  \n\n### **Task Instructions:**  \n\n1. **Identify Key Moments**:  \n   Analyze the patient’s data to extract \"key moments,\" including:  \n   - Symptoms (e.g., \"Regularly gets tired\").  \n   - Lab results (e.g., \"Low B12\", \"Low Vitamin D\").  \n   - Hormone levels (e.g., \"Free Testosterone - 0.2 mol/L\").  \n   - Lifestyle factors or medical history (e.g., \"Busy life\", \"History of impotence\").  \n\n2. **Generate Specific Queries**:  \n   For each key moment, write a concise and actionable RAG search query targeting:  \n   - Relevant treatments or interventions.  \n   - Diagnostic recommendations.\n\n3. **Provide Reasoning**:  \n   For each query, include a brief explanation that outlines:  \n   - The relevance of the query to the patient’s condition.  \n   - Any contextual alignment with inclusion or exclusion triggers.  \n\n4. **Ensure Alignment**:  \n  Queries should align with inclusion and exclusion triggers for treatments and focus on personalized, effective options.  \n\n### **Examples:**  \n1. **Key Moment**: \"DHEA Sulphate - 2.5 umol/L\"  \n   **Query**: \"Find all medications with inclusion criteria for patients where DHEA sulphate levels are 6 umol/L or lower.\"  \n   **Reason**: \"DHEA sulphate is significantly low in this patient, and supplementation may improve hormone balance and energy levels.\"  \n\n2. **Key Moment**: \"Low Vitamin D\"  \n   **Query**: \"Retrieve all medications where the inclusion trigger specifies low Vitamin D levels. Include options with descriptions or criteria matching serum 25-hydroxyvitamin D levels below 50 nmol/L or related deficiencies.\"  \n   **Reason**: \"The patient has a documented deficiency, and targeted supplementation may improve bone health and fatigue.\"  \n\n3. **Key Moment**: \"History of impotence for 15 years\"  \n   **Query**: \"Retrieve testosterone replacement options for men with low free testosterone. Include therapies compatible with a history of impotence and consider implications for new relationships.\"  \n   **Reason**: \"Testosterone deficiency may contribute to erectile dysfunction and decreased libido, which are affecting the patient’s quality of life.\"  \n`.trim();\n\nconst userPrompt = `\nUser data:\n\n${$('Generate patient anamnesis').first().json.anamnesis}\n`.trim();\n\nreturn [\n  {\n    history: [\n      {\n        role: 'system',\n        content: systemPrompt\n      },\n      {\n        role: 'assistant',\n        content: userPrompt\n      }\n    ]\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2480,
        740
      ],
      "id": "51a0d467-e706-400c-8b67-805528f171a0",
      "name": "Prepare prompt for RAG queries generation"
    },
    {
      "parameters": {
        "model": "gpt-4o",
        "options": {
          "responseFormat": "json_object"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        3320,
        960
      ],
      "id": "ea0941ac-2eb9-4b42-b001-2333d3b7452f",
      "name": "OpenAI Chat Model2",
      "credentials": {
        "openAiApi": {
          "id": "efHlwehLp2xTvVDY",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "fieldToSplitOut": "output.queries",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        3580,
        740
      ],
      "id": "d1059cf7-9e57-46d7-a822-0476826e0033",
      "name": "Split Out"
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    kernelMemory: {\n      baseUrl: 'http://kernel_service:9001',\n      collectionIndex: 'interventionsv1'\n    },\n    ragSearchInterventionsLimit: 20,\n    selfUrl: 'http://localhost:5678'\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        520,
        100
      ],
      "id": "2d2cd583-5161-4c21-8fd1-79e06a052863",
      "name": "Config"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Config').first().json.kernelMemory.baseUrl }}/search",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"index\": \"{{ $('Config').first().json.kernelMemory.collectionIndex }}\",\n  \"query\": \"{{ $json.query }}\",\n  \"filters\": [\n    {\n      \"pathwayUrl\": [\n        \"{{ $('Input data').first().json.pathwayUrl }}\"\n      ]\n    }\n  ],\n  \"limit\": 3,\n  \"args\": {\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3840,
        740
      ],
      "id": "6181a3f9-3c40-48ed-8cff-7144efcc9a81",
      "name": "Search Intervention Items"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "43beaefd-26bf-48fd-a304-6b222c0c8e3c",
              "leftValue": "={{ $json.noResult }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        4060,
        740
      ],
      "id": "95c546a1-a5d4-407c-b441-7dc7164843c3",
      "name": "If no results"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        4400,
        660
      ],
      "id": "272338c9-ca47-4b15-9a7a-c18ccf2c4595",
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {
        "jsCode": "return $input.all().map(x => x.json.intervention);"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4740,
        860
      ],
      "id": "8bdcb14d-6d0f-471b-9cfb-91a56019f6f4",
      "name": "Map to interventions"
    },
    {
      "parameters": {
        "content": "## RAG based interventions filtering",
        "height": 560,
        "width": 2600
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2360,
        580
      ],
      "id": "733dcadb-cd67-4643-817b-41bdd76f49a2",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "jsCode": "function reverseFlat(array, maxItems) {\n    const result = [];\n    const maxRowLength = Math.max(...array.map(x => x.results.length));\n    \n    for (let i = 0; i < maxRowLength; ++i) {\n        for (let j = 0; j < array.length; ++j) {\n            if (i >= array[j].results.length)\n                continue;\n                \n            const item = array[j].results[i];\n            \n            if (result.find(x => x.item.documentId == item.documentId))\n                continue;\n            \n            result.push({\n              query: array[j].query,\n              item\n            });\n                \n            if (result.length == maxItems)\n                return result;\n        }\n    }\n    \n    return result;\n}\n\n// ================================================================= //\n\n// all items sorted by first match result relevance (desc)\nconst queriesResults = $input\n  .all()\n  .map(x => x.json)\n  .sort((a, b) => {\n    const getRev = (x) => x.results[0].partitions[0].relevance;\n    return getRev(b) - getRev(a);\n  })\n  ;\n\nconsole.log('queriesResults', queriesResults);\n\nconst itemsLimit = $('Config').first().json.ragSearchInterventionsLimit;\n\nconst resultItems = reverseFlat(queriesResults, items);\n\nconsole.log(resultItems, 'resultItems');\n\nconst pathway = $('Extract Pathway from File').first().json.pathway[0];\n\nreturn resultItems.map(x => {\n  const intervention = pathway.treatments.find(t => t.name.toLowerCase().trim() === x.item.partitions[0].tags['name'][0].toLowerCase().trim());\n\n  return {\n    ...x,\n    intervention\n  }\n}).filter(x => !!x.intervention);"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4400,
        860
      ],
      "id": "dd9ae693-88ad-4fec-b336-3453b7e0d45f",
      "name": "Prefilter and limit interventions by search results"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "087d07c4-d8f7-42dc-aaa0-780aaa1a2653",
              "leftValue": "={{ $json.validationResults.last().isValid }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        7820,
        -100
      ],
      "id": "76b69a21-9f17-4c60-b8ee-3a232b89ab0b",
      "name": "Check if match result is valid (final)"
    },
    {
      "parameters": {
        "jsCode": "return $input.all().map(x => {\n  const item = x.json;\n  const lastValidationResult = item.validationResults[item.validationResults.length - 1];\n  const reasons = lastValidationResult.reasons.map(r => ' - ' + r).join('\\n');\n\n  item.matchResult = {\n    isRecommended: false,\n    recommendationReason: '',\n    notRecommendationReason: `Generated Match Result did not pass validation.\\nReasons:\\n${reasons}`,    \n    option: '',\n    dosage: null\n  };\n  item.matchedDosage = null;\n  \n  return item;\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        8040,
        60
      ],
      "id": "4500310b-ce45-44a8-8648-fd7eb64422a0",
      "name": "Map invalid results as not matched",
      "notesInFlow": true,
      "notes": "In theory never should go here"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        8260,
        -100
      ],
      "id": "5c9dc788-45ea-4ce5-88b4-9d968fc9d691",
      "name": "Merge final results"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "eFv4ckp62OkUBIuA",
          "mode": "list",
          "cachedResultName": "Match sub-workflow"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.1,
      "position": [
        5840,
        -100
      ],
      "id": "fc5cfc68-0f4e-4f39-b54d-940ed28c2049",
      "name": "Match and Validate Try 0"
    },
    {
      "parameters": {
        "jsCode": "return $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        6120,
        -100
      ],
      "id": "510dea6a-26ba-499c-ba18-b807ccaaaa32",
      "name": "Results after try 0"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "eFv4ckp62OkUBIuA",
          "mode": "list",
          "cachedResultName": "Match sub-workflow"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.1,
      "position": [
        6700,
        180
      ],
      "id": "d945c046-cd19-4fa0-8727-95274127341d",
      "name": "Match and Validate Try  1"
    },
    {
      "parameters": {
        "jsCode": "return $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        7000,
        180
      ],
      "id": "dfe2c30c-22f2-48e3-ba8e-8e0dfb6ce2ff",
      "name": "Results after try 1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        7360,
        -100
      ],
      "id": "8c0349a7-59b1-441a-8da6-c5380dfa07fa",
      "name": "Merge1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "da77b3a8-572e-497d-87b7-3384fa01db87",
              "leftValue": "={{ $json.validationResults.last().isValid }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        6380,
        -100
      ],
      "id": "7a0591b1-ad35-4dcb-a87d-1881d650bd95",
      "name": "Check if last result is valid 0"
    },
    {
      "parameters": {
        "html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Generated Health Plan Result</title>\n\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\"\n          integrity=\"sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH\" crossorigin=\"anonymous\">\n\n    <style>\n        .container {\n            min-height: 100vh;\n            height: 100%;\n        }\n    </style>\n</head>\n<body data-bs-theme=\"dark\">\n\n<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-12\">\n            <h1 class=\"mt-5\">Health Plan</h1>\n\n            <p>Generated at: 12/18/2024, 9:38:46 AM</p>\n            <p>Execution time: {{ $('Format response').first().json.executionTime }} seconds</p>\n            <p>Timstamp: {{ $('Format response').first().json.timestamp }}</p>\n\n            <h2>{{ $json.matchedItems.length }} Matched items</h2>\n\n            <div class=\"accordion mt-3\">\n                {{ $json.matchedItems.join('\\n') }}\n            </div>\n\n            <h2 class=\"mt-3\">{{ $json.notMatchedItems.length }} Unmatched items</h2>\n\n            <div class=\"accordion mt-3\">\n                {{ $json.notMatchedItems.join('\\n') }}\n            </div>\n          \n            <h2 class=\"mt-3\">Raw JSON response</h2>\n          \n            <div class=\"accordion mt-3\">\n                <div class=\"accordion-item\">\n                    <h2 class=\"accordion-header\">\n                        <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\"\n                                data-bs-target=\"#raw-response\">\n                            JSON Response\n                        </button>\n                    </h2>\n                    <div id=\"raw-response\" class=\"accordion-collapse collapse\">\n                        <andypf-json-viewer indent=\"2\"\n                                            expanded=\"true\"\n                                            theme=\"default-dark\"\n                                            show-data-types=\"false\"\n                                            expand-icon-type=\"arrow\"\n                                            show-copy=\"true\"\n                                            show-size=\"true\">\n                          {{ $json.rawData }}\n                        </andypf-json-viewer>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"mt-5\"></div>\n\n        </div>\n    </div>\n</div>\n\n<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js\"\n        integrity=\"sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz\"\n        crossorigin=\"anonymous\"></script>\n\n<script type=\"module\">\n    import {marked} from \"https://cdn.jsdelivr.net/npm/marked/lib/marked.esm.js\";\n    const data = {{ JSON.stringify($json.markupMap) }};\n  \n     for (let item of data) {\n        document.getElementById(item.id).innerHTML = marked.parse(item.content);\n    }\n</script>\n\n<script src=\"https://pfau-software.de/json-viewer/dist/iife/index.js\"></script>\n\n</body>\n</html>"
      },
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [
        9100,
        380
      ],
      "id": "14712a7d-265e-4a30-9793-e4a2e3425862",
      "name": "HTML"
    },
    {
      "parameters": {
        "jsCode": "const data = $input.first().json;\nconst items = data.interventionItems;\nconst matchedItems = [];\nconst notMatchedItems = [];\nconst markupMap = [];\n\nfor (let i = 0; i < items.length; ++i) {\n  const item = items[i];\n  const template = toHtmlTemplate(item, i, markupMap);\n\n  if (item.matchResult.isRecommended) {\n    matchedItems.push(template);\n  }\n  else {\n    notMatchedItems.push(template);\n  }\n}\n\nreturn [\n  {\n    matchedItems,\n    notMatchedItems,\n    rawData: JSON.stringify(data),\n    markupMap\n  }\n];\n\nfunction toHtmlTemplate(item, itemIndex, markupMap) {\n  const itemId = 'item-' + itemIndex;\n  const matchResult = item.matchResult;\n  const matchedDosages = item.matchedDosage;\n  const originItem = item.originItem;\n  const reason = matchResult.isRecommended \n    ? matchResult.recommendationReason\n    : matchResult.notRecommendationReason;\n  \n  const template = `\n    <div class=\"accordion-item\">\n      <h2 class=\"accordion-header\">\n          <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\"\n                  data-bs-target=\"#${itemId}\">\n              ${item.originItem.name}\n          </button>\n      </h2>\n      <div id=\"${itemId}\" class=\"accordion-collapse collapse\">\n          <div class=\"accordion-body\">\n\n              <ul class=\"font-weight-normal\">\n                  <li>Reason: ${reason ?? '-'}</li>\n                  <li>Retries: ${item.validationResults?.length ?? 0}</li>\n                  <li>Option: ${matchResult.option ?? '-'}</li>\n                  <li>Dosage: ${matchResult.dosage?.dosage ?? '-'}</li>\n                  <li>Dosage Frequency: ${originItem?.frequency ?? '-'}</li>\n                  <li>Dosage recommendation reason: ${matchResult.dosage?.recommendationReason ?? '-'}</li>\n                  <li>Dossign instructions: ${originItem.dossingInstructions ?? '-'}</li>\n              </ul>\n\n              <h5>History</h5>\n\n              <div class=\"accordion mt-3\">\n                  ${historyToHtmlTemplate(item.history, itemId, markupMap)}\n              </div>\n\n              <h5 class=\"mt-3\">Validation iterations</h5>\n\n              <div class=\"accordion mt-3\">\n                  ${validationToHtmlTemplate(item.validationResults, itemId)}\n              </div>\n\n              <h5 class=\"mt-3\">Intervention raw data</h5>\n\n              <div class=\"accordion mt-3\">\n                  <div class=\"accordion-item\">\n                      <h2 class=\"accordion-header\">\n                          <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#${itemId}-intervention-data\">\n                              JSON\n                          </button>\n                      </h2>\n                      <div id=\"${itemId}-intervention-data\" class=\"accordion-collapse collapse\">\n                          <andypf-json-viewer indent=\"2\"\n                              expanded=\"true\"\n                              theme=\"default-dark\"\n                              show-data-types=\"false\"\n                              expand-icon-type=\"arrow\"\n                              show-copy=\"true\"\n                              show-size=\"true\">\n                              ${JSON.stringify(originItem)}\n                          </andypf-json-viewer>\n                      </div>\n                  </div>\n              </div>\n\n          </div>\n      </div>\n  </div>\n  `;\n\n  return template;\n}\n\nfunction historyToHtmlTemplate(history, itemId, markupMap) {\n  let result = '';\n\n  for (let i = 0; i < history.length; ++i) {\n    const item = history[i];\n    const historyItemId = `${itemId}-history-${i}`;\n    const markupId = `${historyItemId}-markup`;\n    markupMap.push({\n      id: markupId,\n      content: item.content\n    });\n    \n    result += `\n      <div class=\"accordion-item\">\n          <h2 class=\"accordion-header\">\n              <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#${historyItemId}\">\n                  ${item.role}\n              </button>\n          </h2>\n          <div id=\"${historyItemId}\" class=\"accordion-collapse collapse\">\n              <div class=\"accordion-body\">\n                  <div id='${markupId}'>\n                      <pre>${item.content}</pre>\n                  </div>\n              </div>\n          </div>\n      </div>\n    `\n  }\n\n  return result;\n}\n\nfunction validationToHtmlTemplate(validationResults, itemId) {\n  let result = '';\n\n  for (let i = 0; i < validationResults.length; ++i) {\n    const item = validationResults[i];\n    const id = `${itemId}-validation-${i}`;\n    const reasons = item.reasons.map(x => `<li>${x}</li>`).join('\\n');\n    \n    result += `\n      <div class=\"accordion-item\">\n          <h2 class=\"accordion-header\">\n              <button class=\"accordion-button collapsed\" type=\"button\"\n                      data-bs-toggle=\"collapse\" data-bs-target=\"#${id}\">\n                  Try ${i + 1}: ${item.isValid ? 'valid' : 'invalid'}\n              </button>\n          </h2>\n          <div id=\"${id}\" class=\"accordion-collapse collapse\">\n              <div class=\"accordion-body\">\n                  <p>Reasons:</p>\n                  <ul>\n                      ${reasons}\n                  </ul>\n              </div>\n          </div>\n      </div>\n    `;\n  }\n\n  return result;\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        8880,
        380
      ],
      "id": "b47f0fdf-8a23-491d-add4-54a17d487da4",
      "name": "Code1"
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "html",
        "binaryPropertyName": "file",
        "options": {
          "fileName": "=health-plan-{{ $json.timestamp }}.html"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        9340,
        380
      ],
      "id": "599a8290-4aef-4578-99ba-5110d2e49b45",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "jsCode": "const startedAt = $now;\nreturn [\n  {\n    startedAt: startedAt,\n    timestamp: startedAt.toMillis()\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        260,
        100
      ],
      "id": "e1f31da9-1cd1-4f75-9aa0-5e62efe2e87a",
      "name": "Started at"
    },
    {
      "parameters": {
        "text": "=# Message History\n\n**System:**\n{{ $('Prepare prompt for RAG queries generation').item.json.history[0].content }}\n\n**User:**\n{{ $('Prepare prompt for RAG queries generation').item.json.history[1].content }}\n\n**Assistant:**\n{{ $json.text }}",
        "schemaType": "fromJson",
        "jsonSchemaExample": "{\n\t\"queries\": [\n      {\n        \"query\": \"Query text\",\n        \"reason\": \"Reason for generated query\"\n      }\n    ]\n}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.informationExtractor",
      "typeVersion": 1,
      "position": [
        3220,
        740
      ],
      "id": "0260d9a1-b9ae-45eb-a657-a2fb353bbb18",
      "name": "Format as JSON",
      "retryOnFail": true,
      "maxTries": 5,
      "waitBetweenTries": 5000
    }
  ],
  "pinData": {
    "Execute Workflow Trigger": [
      {
        "json": {
          "pathwayUrl": "https://fhir.aera.health/fhir/R4/PlanDefinition/2124af55-22b3-44e3-abeb-dfa750e3ea41",
          "inverventionName": "",
          "searchType": "RAG search",
          "bloodResultsData": {
            "date": "05/06/2023",
            "results": [
              {
                "test": "HAEMOGLOBIN",
                "range": "130 - 170",
                "unit": "g/L",
                "value": 147
              },
              {
                "test": "HCT",
                "range": "0.37 - 0.50",
                "value": 0.448
              },
              {
                "test": "RED CELL COUNT",
                "range": "4.40 - 5.80",
                "unit": "x10^12/L",
                "value": 4.78
              },
              {
                "test": "MCV",
                "range": "80 - 99",
                "unit": "fL",
                "value": 93.7
              },
              {
                "test": "MCH",
                "range": "27.0 - 33.5",
                "unit": "pg",
                "value": 30.8
              },
              {
                "test": "MCHC",
                "range": "300 - 350",
                "unit": "g/L",
                "value": 328
              },
              {
                "test": "RDW",
                "range": "11.5 - 15.0",
                "value": 12
              },
              {
                "test": "PLATELET COUNT",
                "range": "150 - 400",
                "unit": "x10^9/L",
                "value": 174
              },
              {
                "test": "MPV",
                "range": "7 - 13",
                "unit": "fL",
                "value": 10.9
              },
              {
                "test": "WHITE CELL COUNT",
                "range": "3.0 - 10.0",
                "unit": "x10^9/L",
                "value": 5.95
              },
              {
                "test": "Neutrophils",
                "range": "2.0 - 7.5",
                "unit": "x10^9/L",
                "value": 3.43,
                "percentage": 57.6
              },
              {
                "test": "Lymphocytes",
                "range": "1.2 - 3.65",
                "unit": "x10^9/L",
                "value": 2.02,
                "percentage": 33.9
              },
              {
                "test": "Monocytes",
                "range": "0.2 - 1.0",
                "unit": "x10^9/L",
                "value": 0.44,
                "percentage": 7.4
              },
              {
                "test": "Eosinophils",
                "range": "0.0 - 0.4",
                "unit": "x10^9/L",
                "value": 0.05,
                "percentage": 0.8
              },
              {
                "test": "Basophils",
                "range": "0.0 - 0.1",
                "unit": "x10^9/L",
                "value": 0.02,
                "percentage": 0.3
              },
              {
                "test": "ALBUMIN",
                "range": "34 - 50",
                "unit": "g/L",
                "value": 46
              },
              {
                "test": "Prostate Specific Ag (Total)",
                "range": "0.00 - 2.99",
                "unit": "ug/L",
                "value": 0.29
              },
              {
                "test": "FOLLICLE STIM. HORMONE",
                "range": "1.5 - 12.4",
                "unit": "IU/L",
                "value": 3.3
              },
              {
                "test": "LUTEINISING HORMONE",
                "range": "1.7 - 8.6",
                "unit": "IU/L",
                "value": 2.5
              },
              {
                "test": "PROGESTERONE",
                "range": "0.2 - 0.5",
                "unit": "nmol/L",
                "value": 0.5
              },
              {
                "test": "TESTOSTERONE",
                "range": "7.6 - 31.4",
                "unit": "nmol/L",
                "value": 20.8
              },
              {
                "test": "SEX HORMONE BINDING GLOB",
                "range": "19 - 83",
                "unit": "nmol/L",
                "value": 70
              },
              {
                "test": "PROLACTIN",
                "range": "86 - 324",
                "unit": "mIU/L",
                "value": 113
              },
              {
                "test": "17-Beta OESTRADIOL",
                "range": "< 192",
                "unit": "pmol/L",
                "value": 81
              },
              {
                "test": "D.H.E.A. Sulphate",
                "range": "0.44 - 13.4",
                "unit": "umol/L",
                "value": 5.7
              },
              {
                "test": "Free Testosterone",
                "range": "5.0 - 21.0",
                "unit": "pg/ml",
                "value": 8.2
              },
              {
                "test": "Dihydrotestosterone",
                "range": "0.33 - 3.01",
                "unit": "nmol/L",
                "value": 1.61
              }
            ]
          },
          "patientProfile": "# Patient profile\n\n- Age: 58\n- DOB: 1966\n- Gender: male\n- Symptoms: Insomnia, fatigue, afternoon tiredness, lower energy levels, work stress\n\n---\n\n# Social  \n\n**Date: 12/02/2020**  \n- otherwise well  \n- 40-50 press-ups 2-3 x weekly, Personal trainer weekly, run with the dog 1 time a week - 5k, Golf occasionally, walks to and from station - 2km each way - 4x weekly, rugby training on Sundays with son - but less as son broke ankle 6 months ago (12 years old)  \n- Eats 3x a day, healthy. Son is vegan, so more towards vegetarian  \n\n**Date: 10/09/2018**  \n- Ex-Cigar Smoker  \n\n**Date: 11/05/2017**  \n- Last Nov opticians - astigmatisim, left eye weaker than right, has glasses but doesn't wear it. Last saw dentist Jan 2017, sees dentist 6 monthly.  \n- Non-smoker  \n- 3-4 times a week  \n- 1-2 hours per week  \n- company director  \n- Smoked for 28 years, 20 a day, 28 pack day history  \n- Married  \n- Light drinker - 1-2u/day  \n\n---\n\n# Medical history  \n\n**Date: 07/06/2023**  \n- Discussed sharing records with NHS practice  \n\n**Date: 25/03/2023**  \n- Generally well. CAJCOLD+ left medial collar bone: 5mmx3mm irregularly bordered papule. Uniform hypopigmented colour. No central depression, no flaking, no other sinister characteristics.  \n\n**Date: 01/11/2021**  \n- Systolic BP: 110  \n- Diastolic BP: 72  \n\n**Date: 10/02/2021**  \n- Weight: 90.2  \n- BMI: 28.47  \n\n**Date: 05/12/2020**  \n- Blood Pressure: 121.78  \n\n**Date: 12/02/2020**  \n- Height: 178  \n\n**Date: 10/09/2018**  \n- Pulse: 77  \n- well chest clear GAEB PR regular sats 98%, PR 77 bpm, glands NAD, good colour CRT <2 seconds  \n\n**Date: 27/10/2017**  \n- Blood Oxygen: 97  \n- lungs clear, good a/e, abdo soft non tender, bs normal, no organomegaly, well hydrated, HS 1 and 2, and nil else  \n\n---\n\n# Medication  \n\n**Date: 12/02/2020**  \n- Omega 3 and Krill oil\n\n**Date: 10/09/2018**  \n- aspirin 75mg  \n\n**Date: 05/01/2017**  \n- nil  \n\n---\n\n# Family history  \n\n**Date: 10/09/2018**  \n- Younger brother recently Dx AF at 47yo  \n\n**Date: 11/05/2017**  \n- Unsure of who father is  \n- Mum: 75 years old - OA  \n- Has two brothers  \n- Brothers have no medical problems  \n- Mum has AF  \n- Brother-in-law: Prostate cancer  \n\n---\n\n# Allergy  \n\n**Date: 05/01/2017**  \n- NKDA\n"
        }
      }
    ]
  },
  "connections": {
    "Generate patient anamnesis": {
      "main": [
        [
          {
            "node": "Search Health Plan Template",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Health Plan Template": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Download pathway",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Stop and Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download pathway": {
      "main": [
        [
          {
            "node": "Extract Pathway from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Pathway from File": {
      "main": [
        [
          {
            "node": "Switch filter interventions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Match intervention by searched name": {
      "main": [
        [
          {
            "node": "Check filtered result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check filtered result": {
      "main": [
        [
          {
            "node": "Map results to final object",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Stop and Error2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Map results to final object": {
      "main": [
        [
          {
            "node": "Prepare initial prompts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare initial prompts": {
      "main": [
        [
          {
            "node": "Match and Validate Try 0",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format response": {
      "main": [
        [
          {
            "node": "Convert to JSON File",
            "type": "main",
            "index": 0
          },
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format health plan markdown": {
      "main": [
        [
          {
            "node": "Convert to MD file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Google Drive",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Drive": {
      "main": [
        [
          {
            "node": "Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Input data": {
      "main": [
        [
          {
            "node": "Started at",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch filter interventions": {
      "main": [
        [
          {
            "node": "Match intervention by searched name",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get all interventions",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get all interventions",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Prepare prompt for RAG queries generation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get all interventions": {
      "main": [
        [
          {
            "node": "Map results to final object",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow Trigger": {
      "main": [
        [
          {
            "node": "Input data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to JSON File": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to MD file": {
      "main": [
        []
      ]
    },
    "Mock data": {
      "main": [
        [
          {
            "node": "Input data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Debug trigger": {
      "main": [
        [
          {
            "node": "Mock data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Generate RAG search queries",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Generate RAG search queries": {
      "main": [
        [
          {
            "node": "Format as JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare prompt for RAG queries generation": {
      "main": [
        [
          {
            "node": "Generate RAG search queries",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Format as JSON",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Search Intervention Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Config": {
      "main": [
        [
          {
            "node": "Generate patient anamnesis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Intervention Items": {
      "main": [
        [
          {
            "node": "If no results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If no results": {
      "main": [
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Prefilter and limit interventions by search results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Map to interventions": {
      "main": [
        [
          {
            "node": "Map results to final object",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prefilter and limit interventions by search results": {
      "main": [
        [
          {
            "node": "Map to interventions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if match result is valid (final)": {
      "main": [
        [
          {
            "node": "Merge final results",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Map invalid results as not matched",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Map invalid results as not matched": {
      "main": [
        [
          {
            "node": "Merge final results",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge final results": {
      "main": [
        [
          {
            "node": "Format response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Match and Validate Try 0": {
      "main": [
        [
          {
            "node": "Results after try 0",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Results after try 0": {
      "main": [
        [
          {
            "node": "Check if last result is valid 0",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Match and Validate Try  1": {
      "main": [
        [
          {
            "node": "Results after try 1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Results after try 1": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Check if match result is valid (final)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if last result is valid 0": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Match and Validate Try  1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTML": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Started at": {
      "main": [
        [
          {
            "node": "Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format as JSON": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "208668f8-84d1-44ff-a0b3-36faedd1f93d",
  "meta": {
    "instanceId": "558d88703fb65b2d0e44613bc35916258b0f0bf983c5d4730c00c424b77ca36a"
  },
  "id": "FlTNy7Ck4cdbyZoi",
  "tags": []
}